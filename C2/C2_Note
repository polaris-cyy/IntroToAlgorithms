## 第二章

---

前言：算法导论的第一章直接跳过了，后续也不会把每个练习都提交上来，因为前几章有些实在是太简单了，以至于不需要写码也可以轻松解决。

所有代码全部使用C++实现，后期可能使用python

练习题和思考题的Code在另一个文件夹中

---

- 概述

  - 本章讲了两种基础排序算法，并在练习中补充了一种最naive的排序算法
  - 关于循环不变式的使用
  - 递归式的复杂度求解

- 插入排序与循环不变式

  - 实现方法：循环

  - 优点：空间复杂度低，时间复杂度在O(n<sup>2</sup>)的算法中属于常数项较低的一类

  - 缺点：不管怎样都是O(n<sup>2</sup>)的算法

  - 伪代码

    ```C
    for j = 2 to A.length
    	key = a[j]
    	i = j-1
    	while i > 0 and A[i] > key
    		A[i+1] = A[i]
    		i = i - 1
         A[i+1] = key
    ```

  - 循环不变式：一种用来验证循环正确性的方法，类似于数学归纳法，共有三个步骤

    - 初始化：循环开始前，某个要证明的结论是正确的

    - 保持：如果在某次循环中，结论正确，那么正确性保持到下次循环开始

    - 终止：算法**会停止**，并且结论正确

      > 可以用插入排序尝试一下

- 归并排序与递归式

  - 实现方法：递归

  - 优点：时间复杂度O(nlgn)

  - 缺点：除此以外，在你能想到的所有方面都是缺点

  - 伪代码

    ```c++
    MergeSort(A, begin, end)
    	if(end > begin)
    		mid = (end+begin+1)/2
    		MergeSort(A, begin, mid-1)
    		MergeSort(A, mid, end)
    		Merge(A, begin, mid, end)
    
    Merge(A, begin, mid, end)
    	p = mid - begin, q = end - mid + 1//Considered the larger one between begin and end
    	Let left[0...p] and right[0...q] be new arrays
    	for i = 1 to p-1
    		left[i] = A[begin+i]
    	for i = 1 to q-1
    		right[i]= A[mid+i]
    	left[p] = right[q] = INF
    	i = j = 0
    	for k = begin to end
    		if left[i] < right[j]
    			A[k] = left[i++]
    		else
    			A[k] = right[j++]
    ```

  - 循环式的复杂度：在第四章会介绍，现在能想到其实就是递归式，但是更详细的处理方式还是需要等之后的课程

---

2022/5/24 18:15
